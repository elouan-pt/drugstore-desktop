/*
 * Copyright (c) 2015 Pastor Tantalean.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Pastor Tantalean - initial API and implementation and/or initial documentation
 */
package view;

import controller.ProductDAO;
import controller.ProofOfPaymentDAO;
import controller.SaleDAO;
import controller.SaleProductDetailDAO;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ProofOfPayment;
import model.Sale;
import model.SaleProductDetail;
import util.Constants;
import util.ImageLoader;
import util.MathUtils;

/**
 *
 * @author Pastor Tantalean
 */
public class NewSalePanel extends javax.swing.JPanel {

    /**
     * Creates new form SalePanel
     */
    public List<SaleProductDetail> list;
    DefaultTableModel dtm;
    private double IGV;
    JInternalFrame frame;

    public NewSalePanel(JInternalFrame frame) {
        initComponents();
        init();

        this.frame = frame;
        frame.getRootPane().setDefaultButton(acceptButton);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        proofOfPaymentLabel = new javax.swing.JLabel();
        employeeLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        proofOfPaymentTextField = new javax.swing.JTextField();
        employeeTextField = new javax.swing.JTextField();
        dateChooser = new com.toedter.calendar.JDateChooser();
        typeComboBox = new javax.swing.JComboBox();
        checkProofOfPaymentLabel = new javax.swing.JLabel();
        checkDateLabel = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        saleTableScrollPane = new javax.swing.JScrollPane();
        saleTable = new javax.swing.JTable();
        subtotalLabel = new javax.swing.JLabel();
        subtotalTextField = new javax.swing.JTextField();
        moneySymbolLabel = new javax.swing.JLabel();
        igvLabel = new javax.swing.JLabel();
        moneySymbolLabel1 = new javax.swing.JLabel();
        igvTextField = new javax.swing.JTextField();
        totalLabel = new javax.swing.JLabel();
        moneySymbolLabel2 = new javax.swing.JLabel();
        totalTextField = new javax.swing.JTextField();
        downPanel = new javax.swing.JPanel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        topCenterSeparator = new javax.swing.JSeparator();

        proofOfPaymentLabel.setText("NÂº de Comprobante:");

        employeeLabel.setText("Empleado:");

        dateLabel.setText("Fecha:");

        employeeTextField.setEditable(false);
        employeeTextField.setEnabled(false);

        dateChooser.getDateEditor().setEnabled(false);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BOLETA", "FACTURA" }));
        typeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(proofOfPaymentLabel)
                .addGap(27, 27, 27)
                .addComponent(proofOfPaymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkProofOfPaymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeLabel)
                    .addComponent(dateLabel))
                .addGap(76, 76, 76)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkProofOfPaymentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(proofOfPaymentLabel)
                        .addComponent(proofOfPaymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(employeeLabel)
                            .addComponent(employeeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateLabel)
                            .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        searchTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchTextFieldFocusLost(evt);
            }
        });

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        saleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Detalle", "Forma", "Cantidad", "Precio Unitario", "Precio Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        saleTable.setToolTipText("");
        saleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saleTableMouseClicked(evt);
            }
        });
        saleTableScrollPane.setViewportView(saleTable);

        subtotalLabel.setText("Total:");

        subtotalTextField.setEditable(false);
        subtotalTextField.setEnabled(false);

        moneySymbolLabel.setText("S/.");

        igvLabel.setText("IGV:");

        moneySymbolLabel1.setText("S/.");

        igvTextField.setEditable(false);
        igvTextField.setEnabled(false);

        totalLabel.setText("Total:");

        moneySymbolLabel2.setText("S/.");

        totalTextField.setEditable(false);
        totalTextField.setEnabled(false);

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(totalLabel)
                        .addGap(23, 23, 23)
                        .addComponent(moneySymbolLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addComponent(igvLabel)
                        .addGap(23, 23, 23)
                        .addComponent(moneySymbolLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(igvTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(centerPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(subtotalLabel)
                            .addGap(23, 23, 23)
                            .addComponent(moneySymbolLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(subtotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(15, 15, 15)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(centerPanelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(saleTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 820, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(saleTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtotalLabel)
                    .addComponent(subtotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moneySymbolLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(igvLabel)
                    .addComponent(igvTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moneySymbolLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalLabel)
                    .addComponent(totalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moneySymbolLabel2)))
        );

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout downPanelLayout = new javax.swing.GroupLayout(downPanel);
        downPanel.setLayout(downPanelLayout);
        downPanelLayout.setHorizontalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addGap(275, 275, 275)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        downPanelLayout.setVerticalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(downPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(topCenterSeparator)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(topCenterSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(centerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saleTableMouseClicked
        if (evt.getClickCount() == 2) {
            int selectedIndex = saleTable.getSelectedRow();
            if (selectedIndex == -1) {
                return;
            }
            int op = JOptionPane.showInternalOptionDialog(centerPanel, "Â¿Desea editar el precio total o eliminar el producto " + list.get(selectedIndex).getProduct().getDescription() + "?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"Editar", "Eliminar"}, "Editar");
            if (op == JOptionPane.NO_OPTION) {
                int ans = JOptionPane.showInternalConfirmDialog(centerPanel, "Â¿EstÃ¡ seguro de eliminar de la venta el producto " + list.get(selectedIndex).getProduct().getDescription() + "?");
                if (ans == JOptionPane.YES_OPTION) {
                    list.remove(selectedIndex);
                    fillTable();
                }
            } else {
                String ans = JOptionPane.showInternalInputDialog(centerPanel, "Ingrese el precio total: ");
                System.err.println(ans);
                if (ans != null) {
                    double totalPrice = MathUtils.round(Double.parseDouble(ans), 2);
                    SaleProductDetail spd = list.get(selectedIndex);
                    spd.setSalePrice(MathUtils.round(totalPrice / spd.getQuantity(), 2));
                    spd.setSaleTotalPrice(totalPrice);
                    fillTable();
                }
            }
        }
    }//GEN-LAST:event_saleTableMouseClicked

    private void typeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboBoxItemStateChanged
        if (typeComboBox.getSelectedItem().equals("FACTURA")) {
            setFacturaDetails(true);
        } else {
            setFacturaDetails(false);
        }
    }//GEN-LAST:event_typeComboBoxItemStateChanged

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        String text = proofOfPaymentTextField.getText().trim();
        String message = "Â¡Venta realizada exitosamente!";
        if (validateAll()) {
            boolean check = true;
            ProofOfPayment pop = new ProofOfPayment(text, typeComboBox.getSelectedItem() + "");
            check &= ProofOfPaymentDAO.insertProofOfPayment(pop);
            if (check) {

                double subtotal = Double.parseDouble(subtotalTextField.getText());
                double igv = Double.parseDouble(igvTextField.getText());
                double total = Double.parseDouble(totalTextField.getText());
                Sale s = new Sale();
                s.setProofOfPayment(pop);
                s.setEmployee(Constants.getUserLoged().getEmployee());
                s.setSubtotal(subtotal);
                s.setIgv(igv);
                s.setTotal(total);
                s.setSaleDate(new java.sql.Date(dateChooser.getDate().getTime()));
                check &= SaleDAO.insertSale(s);
                for (SaleProductDetail spd : list) {
                    spd.setSale(s);
                    check &= SaleProductDetailDAO.insertSaleProductDetail(spd);
                    check &= ProductDAO.getProduct(spd.getProduct());
                }
                if (!check) {
                    message = "Hubo un error al registrar la venta.";
                }

            } else {
                message = "Hubo un error al registrar la venta.";
            }
        } else {
            message = "No ha insertado el nÃºmero de comprobante.";
        }
        JOptionPane.showInternalMessageDialog(centerPanel, message);
        init();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        init();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void searchTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusGained
        frame.getRootPane().setDefaultButton(searchButton);
    }//GEN-LAST:event_searchTextFieldFocusGained

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        String search = searchTextField.getText().trim();
        SaleProductDetail spd = new SaleProductDetail();
        AddProductDialog dialog = new AddProductDialog(null, true, search, spd, this);
        dialog.setVisible(true);
        fillTable();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchTextFieldFocusLost
        frame.getRootPane().setDefaultButton(acceptButton);
    }//GEN-LAST:event_searchTextFieldFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel checkDateLabel;
    private javax.swing.JLabel checkProofOfPaymentLabel;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel employeeLabel;
    private javax.swing.JTextField employeeTextField;
    private javax.swing.JLabel igvLabel;
    private javax.swing.JTextField igvTextField;
    private javax.swing.JLabel moneySymbolLabel;
    private javax.swing.JLabel moneySymbolLabel1;
    private javax.swing.JLabel moneySymbolLabel2;
    private javax.swing.JLabel proofOfPaymentLabel;
    private javax.swing.JTextField proofOfPaymentTextField;
    private javax.swing.JTable saleTable;
    private javax.swing.JScrollPane saleTableScrollPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JLabel subtotalLabel;
    private javax.swing.JTextField subtotalTextField;
    private javax.swing.JSeparator topCenterSeparator;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JTextField totalTextField;
    private javax.swing.JComboBox typeComboBox;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        if (list != null) {
            while (dtm.getRowCount() > 0) {
                dtm.removeRow(0);
            }

            double acum = 0.0;

            for (SaleProductDetail spd : list) {
                //double total = MathUtils.round(spd.getSalePrice() * spd.getQuantity(), 2);
                dtm.addRow(new Object[]{spd.getProduct(), spd.getProduct().getForm(), spd.getQuantity(), spd.getSalePrice(), spd.getSaleTotalPrice()});
                acum += spd.getSaleTotalPrice();
            }
            subtotalTextField.setText(acum + "");
            double igv = MathUtils.round(acum * IGV / 100, 1);
            igvTextField.setText(igv + "");
            totalTextField.setText(acum + igv + "");
        }
    }

    private void setFacturaDetails(boolean b) {
        igvLabel.setVisible(b);
        igvTextField.setVisible(b);
        totalLabel.setVisible(b);
        totalTextField.setVisible(b);
        moneySymbolLabel1.setVisible(b);
        moneySymbolLabel2.setVisible(b);
        if (b) {
            subtotalLabel.setText("Subtotal:");
            IGV = Constants.getIGV();
            fillTable();
        } else {
            subtotalLabel.setText("Total:");
            IGV = 0.0;
            fillTable();
        }
    }

    private boolean validateAll() {
        return validateProofOfPayment() && validateDate();
    }

    private boolean validateProofOfPayment() {
        String text = proofOfPaymentTextField.getText().trim();
        if (text.isEmpty()) {
            checkProofOfPaymentLabel.setEnabled(false);
            checkProofOfPaymentLabel.setToolTipText("Ingrese un nÃºmero de comprobante vÃ¡lido.");
            return false;
        } else {
            checkProofOfPaymentLabel.setEnabled(true);
            checkProofOfPaymentLabel.setToolTipText("Correcto");
            return true;
        }
    }

    private boolean validateDate() {
        Date d = dateChooser.getDate();
        if (d == null) {
            checkProofOfPaymentLabel.setEnabled(false);
            checkProofOfPaymentLabel.setToolTipText("Ingrese una fecha vÃ¡lida");
            return false;
        } else {
            checkProofOfPaymentLabel.setEnabled(true);
            checkProofOfPaymentLabel.setToolTipText("Correcto");
            return true;
        }
    }

    private void init() {

        employeeTextField.setText(Constants.getUserLoged().getEmployee().toString());
        list = new ArrayList<>();
        dtm = (DefaultTableModel) saleTable.getModel();

        setFacturaDetails(false);
        dateChooser.setDate(new Date());
        checkProofOfPaymentLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
        checkProofOfPaymentLabel.setDisabledIcon(new ImageLoader().VOIDED_IMAGE);
        checkDateLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
        checkDateLabel.setDisabledIcon(new ImageLoader().VOIDED_IMAGE);
        subtotalTextField.setText("0.0");
        igvTextField.setText("0.0");
        totalTextField.setText("0.0");
        proofOfPaymentTextField.setText("");
        IGV = 0.0;
        fillTable();
    }
}
