/*
 * Copyright (c) 2015 Pastor Tantalean.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Pastor Tantalean - initial API and implementation and/or initial documentation
 */
package view;

import controller.EmployeeDAO;
import controller.EmployeePermissionDetailDAO;
import controller.UserDAO;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import model.Employee;
import model.EmployeePermissionDetail;
import model.Permission;
import model.User;
import util.ImageLoader;
import util.IntegerDocumentFilter;
import util.PasswordHash;
import util.Validation;

/**
 *
 * @author Pastor Tantalean
 */
public class UpdateUserPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateUserPanel
     */
    private DefaultTableModel dtm;
    private User userSelected;
    Boolean[] correct = {false, false, false, false, true, true, true};

    public UpdateUserPanel() {
        initComponents();
        fillTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        userTableScrollPane = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        newPasswordLabel = new javax.swing.JLabel();
        confirmPasswordLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        phoneNumberLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        newPasswordTextField = new javax.swing.JPasswordField();
        confirmPasswordTextField = new javax.swing.JPasswordField();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        emailTextField = new javax.swing.JTextField();
        phoneNumberTextField = new javax.swing.JTextField();
        ((AbstractDocument) phoneNumberTextField.getDocument()).setDocumentFilter(
            new IntegerDocumentFilter());
        ageSpinner = new javax.swing.JSpinner();
        checkNewPasswordLabel = new javax.swing.JLabel();
        checkConfirmPasswordLabel = new javax.swing.JLabel();
        checkFirstNameLabel = new javax.swing.JLabel();
        checkLastNameLabel = new javax.swing.JLabel();
        checkEmailLabel = new javax.swing.JLabel();
        checkPhoneNumberLabel = new javax.swing.JLabel();
        checkAgeLabel = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        downPanel = new javax.swing.JPanel();
        accessLabel = new javax.swing.JLabel();
        warehouseCheckBox = new javax.swing.JCheckBox();
        saleCheckBox = new javax.swing.JCheckBox();
        reportsCheckBox = new javax.swing.JCheckBox();
        usersCheckBox = new javax.swing.JCheckBox();
        updateUserButton = new javax.swing.JButton();
        topDownSeparator = new javax.swing.JSeparator();
        leftRightSeparator = new javax.swing.JSeparator();

        dtm = new DefaultTableModel(
            new Object[][]{},
            new String[]{
                "Usuario", "Nombre Completo"
            }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        userTable.setModel(dtm);
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                userTableMousePressed(evt);
            }
        });
        userTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                userTableKeyReleased(evt);
            }
        });
        userTableScrollPane.setViewportView(userTable);

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        searchButton.setBorderPainted(false);
        searchButton.setFocusPainted(false);
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(searchTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchTextField)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(userTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        newPasswordLabel.setText("Nueva Contraseña:");

        confirmPasswordLabel.setText("Confirmar Contraseña:");

        firstNameLabel.setText("Nombres:");

        lastNameLabel.setText("Apellidos:");

        emailLabel.setText("Correo electrónico:");

        phoneNumberLabel.setText("Nº Telefónico:");

        ageLabel.setText("Edad:");

        newPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                newPasswordTextFieldFocusLost(evt);
            }
        });

        confirmPasswordTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                confirmPasswordTextFieldFocusLost(evt);
            }
        });

        firstNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                firstNameTextFieldFocusLost(evt);
            }
        });

        lastNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lastNameTextFieldFocusLost(evt);
            }
        });

        emailTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailTextFieldFocusLost(evt);
            }
        });

        phoneNumberTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phoneNumberTextFieldFocusLost(evt);
            }
        });

        ageSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 150, 1));
        ageSpinner.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ageSpinnerFocusLost(evt);
            }
        });

        checkNewPasswordLabel.setToolTipText("");

        checkConfirmPasswordLabel.setToolTipText("");

        checkFirstNameLabel.setToolTipText("");

        checkLastNameLabel.setToolTipText("");

        checkEmailLabel.setToolTipText("");

        checkPhoneNumberLabel.setToolTipText("");

        checkAgeLabel.setToolTipText("");

        usernameTextField.setEditable(false);
        usernameTextField.setEnabled(false);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneNumberLabel)
                            .addComponent(ageLabel))
                        .addGap(60, 60, 60)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneNumberTextField)
                            .addGroup(topPanelLayout.createSequentialGroup()
                                .addComponent(ageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPasswordLabel)
                            .addComponent(confirmPasswordLabel)
                            .addComponent(firstNameLabel)
                            .addComponent(lastNameLabel)
                            .addComponent(emailLabel))
                        .addGap(18, 18, 18)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(emailTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                            .addComponent(lastNameTextField)
                            .addComponent(firstNameTextField)
                            .addComponent(confirmPasswordTextField)
                            .addComponent(newPasswordTextField))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkConfirmPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkPhoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkNewPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(newPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(newPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkNewPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmPasswordLabel)
                    .addComponent(confirmPasswordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkConfirmPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(firstNameLabel)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkFirstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lastNameLabel)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkLastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(emailLabel)
                        .addComponent(emailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkEmailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(phoneNumberLabel)
                        .addComponent(phoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkPhoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkAgeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );

        accessLabel.setText("ACCESOS");

        warehouseCheckBox.setText("Almacén");

        saleCheckBox.setText("Ventas");

        reportsCheckBox.setText("Reportes");

        usersCheckBox.setText("Usuarios");

        updateUserButton.setText("ACTUALIZAR");
        updateUserButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateUserButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout downPanelLayout = new javax.swing.GroupLayout(downPanel);
        downPanel.setLayout(downPanelLayout);
        downPanelLayout.setHorizontalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downPanelLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(downPanelLayout.createSequentialGroup()
                                .addComponent(reportsCheckBox)
                                .addGap(59, 59, 59)
                                .addComponent(usersCheckBox))
                            .addGroup(downPanelLayout.createSequentialGroup()
                                .addComponent(warehouseCheckBox)
                                .addGap(63, 63, 63)
                                .addComponent(saleCheckBox))
                            .addGroup(downPanelLayout.createSequentialGroup()
                                .addGap(81, 81, 81)
                                .addComponent(accessLabel))))
                    .addGroup(downPanelLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(updateUserButton)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        downPanelLayout.setVerticalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(accessLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warehouseCheckBox)
                    .addComponent(saleCheckBox))
                .addGap(8, 8, 8)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reportsCheckBox)
                    .addComponent(usersCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateUserButton, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        leftRightSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftRightSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(topDownSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(downPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(topDownSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(leftRightSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //fillTable();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            fillTable();
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void userTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMousePressed
        getUserSelected();
        validateAll();
    }//GEN-LAST:event_userTableMousePressed

    private void userTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userTableKeyReleased
        getUserSelected();
        validateAll();
    }//GEN-LAST:event_userTableKeyReleased

    private void newPasswordTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_newPasswordTextFieldFocusLost
        validateNewPassword();
        validateConfirmPassword();
    }//GEN-LAST:event_newPasswordTextFieldFocusLost

    private void confirmPasswordTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_confirmPasswordTextFieldFocusLost
        validateConfirmPassword();
    }//GEN-LAST:event_confirmPasswordTextFieldFocusLost

    private void firstNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTextFieldFocusLost
        validateFirstName();
    }//GEN-LAST:event_firstNameTextFieldFocusLost

    private void lastNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lastNameTextFieldFocusLost
        validateLastName();
    }//GEN-LAST:event_lastNameTextFieldFocusLost

    private void emailTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailTextFieldFocusLost
        validateEmail();
    }//GEN-LAST:event_emailTextFieldFocusLost

    private void phoneNumberTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phoneNumberTextFieldFocusLost
        validatePhoneNumber();
    }//GEN-LAST:event_phoneNumberTextFieldFocusLost

    private void ageSpinnerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ageSpinnerFocusLost
        validateAge();
    }//GEN-LAST:event_ageSpinnerFocusLost

    private void updateUserButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateUserButtonMouseClicked
        validateAll();

        boolean check = true;

        if (usernameTextField.getText().isEmpty()) {
            check &= false;
        }

        for (boolean c : correct) {
            check &= c;
        }

        if (check) {
            Employee e = new Employee(firstNameTextField.getText(), lastNameTextField.getText(), emailTextField.getText(), phoneNumberTextField.getText(), Integer.parseInt(ageSpinner.getValue().toString()));
            e.setEmployeeID(userSelected.getEmployee().getEmployeeID());
            check &= EmployeeDAO.updateEmployee(e);

            String hash = "";
            try {
                hash = PasswordHash.createHash(newPasswordTextField.getPassword());
            } catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
                Logger.getLogger(NewUserPanel.class.getName()).log(Level.SEVERE, null, ex);
                check &= false;
            }
            User u = new User(usernameTextField.getText(), hash, e);
            u.setUserID(userSelected.getUserID());
            check &= UserDAO.updateUser(u);

            EmployeePermissionDetailDAO.deletePermissionByEmployeeID(e.getEmployeeID());
            List<Permission> list = new ArrayList<>();
            fillPermissionList(list);
            for (Permission p : list) {
                check &= EmployeePermissionDetailDAO.insertEmployeePermissionDetail(new EmployeePermissionDetail(e, p));
            }
        }
        String message = "Usuario actualizado correctamente.";
        if (check) {
            cleanFields();
            validateAll();
            fillTable();
        } else {
            message = "Algunos datos están incompletos o hubo un error al actualizar el usuario.";
        }
        JOptionPane.showInternalMessageDialog(this, message);
    }//GEN-LAST:event_updateUserButtonMouseClicked

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        fillTable();
    }//GEN-LAST:event_searchButtonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accessLabel;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JSpinner ageSpinner;
    private javax.swing.JLabel checkAgeLabel;
    private javax.swing.JLabel checkConfirmPasswordLabel;
    private javax.swing.JLabel checkEmailLabel;
    private javax.swing.JLabel checkFirstNameLabel;
    private javax.swing.JLabel checkLastNameLabel;
    private javax.swing.JLabel checkNewPasswordLabel;
    private javax.swing.JLabel checkPhoneNumberLabel;
    private javax.swing.JLabel confirmPasswordLabel;
    private javax.swing.JPasswordField confirmPasswordTextField;
    private javax.swing.JPanel downPanel;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTextField;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JSeparator leftRightSeparator;
    private javax.swing.JLabel newPasswordLabel;
    private javax.swing.JPasswordField newPasswordTextField;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JTextField phoneNumberTextField;
    private javax.swing.JCheckBox reportsCheckBox;
    private javax.swing.JCheckBox saleCheckBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JSeparator topDownSeparator;
    private javax.swing.JPanel topPanel;
    private javax.swing.JButton updateUserButton;
    private javax.swing.JTable userTable;
    private javax.swing.JScrollPane userTableScrollPane;
    private javax.swing.JTextField usernameTextField;
    private javax.swing.JCheckBox usersCheckBox;
    private javax.swing.JCheckBox warehouseCheckBox;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        List<User> list = UserDAO.listOfUsersByUsername(searchTextField.getText().trim());
        if (list != null) {
            while (dtm.getRowCount() > 0) {
                dtm.removeRow(0);
            }

            for (User u : list) {
                if (u.getUsername().equals("Elouan")) {
                    continue;
                }
                dtm.addRow(new Object[]{u, u.getEmployee().getFirstName() + " " + u.getEmployee().getLastName()});
            }
        }
    }

    private void getUserSelected() {
        int selectedIndex = userTable.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        userSelected = (User) dtm.getValueAt(selectedIndex, 0);
        usernameTextField.setText(userSelected.getUsername());
        firstNameTextField.setText(userSelected.getEmployee().getFirstName());
        lastNameTextField.setText(userSelected.getEmployee().getLastName());
        emailTextField.setText(userSelected.getEmployee().getEmail());
        phoneNumberTextField.setText(userSelected.getEmployee().getPhoneNumber());
        ageSpinner.setModel(new javax.swing.SpinnerNumberModel(userSelected.getEmployee().getAge(), 0, 150, 1));

        //get permissions
        warehouseCheckBox.setSelected(false);
        reportsCheckBox.setSelected(false);
        saleCheckBox.setSelected(false);
        usersCheckBox.setSelected(false);

        List<Permission> list = EmployeePermissionDetailDAO.permissionsByEmployeeID(userSelected.getEmployee().getEmployeeID());
        for (Permission p : list) {
            switch (p.getPermissionID()) {
                case 1:
                    warehouseCheckBox.setSelected(true);
                    break;
                case 2:
                    reportsCheckBox.setSelected(true);
                    break;
                case 3:
                    saleCheckBox.setSelected(true);
                    break;
                case 4:
                    usersCheckBox.setSelected(true);
                    break;
            }
        }

    }

    private void validateNewPassword() {
        String ans = Validation.validatePassword(String.valueOf(newPasswordTextField.getPassword()));
        if (ans.equals("Correcto")) {
            checkNewPasswordLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[0] = true;
        } else {
            checkNewPasswordLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[0] = false;
        }
        checkNewPasswordLabel.setToolTipText(ans);
    }

    private void validateConfirmPassword() {
        String ans = Arrays.equals(newPasswordTextField.getPassword(), confirmPasswordTextField.getPassword()) ? "Correcto" : "Las contraseñas no son iguales.";
        if (ans.equals("Correcto")) {
            checkConfirmPasswordLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[1] = true;
        } else {
            checkConfirmPasswordLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[1] = false;
        }
        checkConfirmPasswordLabel.setToolTipText(ans);
    }

    private void validateFirstName() {
        String ans = Validation.validateFirstName(firstNameTextField.getText());
        if (ans.equals("Correcto")) {
            checkFirstNameLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[2] = true;
        } else {
            checkFirstNameLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[2] = false;
        }
        checkFirstNameLabel.setToolTipText(ans);
    }

    private void validateLastName() {
        String ans = Validation.validateLastName(lastNameTextField.getText());
        if (ans.equals("Correcto")) {
            checkLastNameLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[3] = true;
        } else {
            checkLastNameLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[3] = false;
        }
        checkLastNameLabel.setToolTipText(ans);
    }

    private void validateEmail() {
        String ans = Validation.validateEmail(emailTextField.getText());
        if (ans.equals("Correcto")) {
            checkEmailLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[4] = true;
        } else {
            checkEmailLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[4] = false;
        }
        checkEmailLabel.setToolTipText(ans);
    }

    private void validatePhoneNumber() {
        String ans = Validation.validatePhoneNumber(phoneNumberTextField.getText());
        if (ans.equals("Correcto")) {
            checkPhoneNumberLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[5] = true;
        } else {
            checkPhoneNumberLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[5] = false;
        }
        checkPhoneNumberLabel.setToolTipText(ans);
    }

    private void validateAge() {
        String ans = Validation.validateAge(ageSpinner.getValue().toString());
        if (ans.equals("Correcto")) {
            checkAgeLabel.setIcon(new ImageLoader().COMPLETE_IMAGE);
            correct[6] = true;
        } else {
            checkAgeLabel.setIcon(new ImageLoader().VOIDED_IMAGE);
            correct[6] = false;
        }
        checkAgeLabel.setToolTipText(ans);
    }

    private void validateAll() {
        validateNewPassword();
        validateConfirmPassword();
        validateFirstName();
        validateLastName();
        validateEmail();
        validatePhoneNumber();
        validateAge();
    }

    private void fillPermissionList(List<Permission> list) {
        if (warehouseCheckBox.isSelected()) {
            list.add(new Permission(1));
        }
        if (reportsCheckBox.isSelected()) {
            list.add(new Permission(2));
        }
        if (saleCheckBox.isSelected()) {
            list.add(new Permission(3));
        }
        if (usersCheckBox.isSelected()) {
            list.add(new Permission(4));
        }
    }

    private void cleanFields() {
        newPasswordTextField.setText("");
        confirmPasswordTextField.setText("");
        firstNameTextField.setText("");
        lastNameTextField.setText("");
        emailTextField.setText("");
        phoneNumberTextField.setText("");
        ageSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 150, 1));
        warehouseCheckBox.setSelected(false);
        reportsCheckBox.setSelected(false);
        saleCheckBox.setSelected(false);
        usersCheckBox.setSelected(false);
    }
}
