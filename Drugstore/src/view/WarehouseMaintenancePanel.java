/*
 * Copyright (c) 2015 Pastor Tantalean.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Pastor Tantalean - initial API and implementation and/or initial documentation
 */
package view;

import controller.EntryDAO;
import controller.FormDAO;
import controller.ProductDAO;
import controller.ProofOfPaymentDAO;
import controller.SupplierDAO;
import java.sql.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.JTextComponent;
import model.Entry;
import model.Form;
import model.Product;
import model.ProofOfPayment;
import model.Supplier;
import util.DoubleDocumentFilter;
import util.IntegerDocumentFilter;
import util.MathUtils;

/**
 *
 * @author Pastor Tantalean
 */
public class WarehouseMaintenancePanel extends javax.swing.JPanel {

    /**
     * Creates new form warehouseMaintenancePanel
     */
    private DefaultTableModel dtm;
    private DefaultComboBoxModel dcbmForm;
    private JTextComponent jtcForm;
    private DefaultComboBoxModel dcbmSupplier;
    private JTextComponent jtcSupplier;
    private Product productSelected;

    public WarehouseMaintenancePanel() {
        initComponents();
        fillTable();

        fillFormComboBox();
        fillSupplierComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        searchTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        productTableScrollPane = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        topDownSeparator = new javax.swing.JSeparator();
        downPanel = new javax.swing.JPanel();
        descriptionLabel = new javax.swing.JLabel();
        formLabel = new javax.swing.JLabel();
        unitPriceLabel = new javax.swing.JLabel();
        quantityLabel = new javax.swing.JLabel();
        batchLabel = new javax.swing.JLabel();
        supplierLabel = new javax.swing.JLabel();
        proofOfPaymentLabel = new javax.swing.JLabel();
        sanitaryRegisterLabel = new javax.swing.JLabel();
        arrivalDateLabel = new javax.swing.JLabel();
        profitPercentageLabel = new javax.swing.JLabel();
        salePriceLabel = new javax.swing.JLabel();
        expiryDateLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        formComboBox = new javax.swing.JComboBox();
        unitPriceTextField = new javax.swing.JTextField();
        ((AbstractDocument) unitPriceTextField.getDocument()).setDocumentFilter(
            new DoubleDocumentFilter());
        quantityTextField = new javax.swing.JTextField();
        ((AbstractDocument) quantityTextField.getDocument()).setDocumentFilter(
            new IntegerDocumentFilter());
        batchTextField = new javax.swing.JTextField();
        supplierComboBox = new javax.swing.JComboBox();
        proofOfPaymentTextField = new javax.swing.JTextField();
        sanitaryRegisterTextField = new javax.swing.JTextField();
        arrivalDateChooser = new com.toedter.calendar.JDateChooser();
        expiryDateChooser = new com.toedter.calendar.JDateChooser();
        profitPercentageTextField = new javax.swing.JTextField();
        ((AbstractDocument) profitPercentageTextField.getDocument()).setDocumentFilter(
            new DoubleDocumentFilter());
        salePriceTextField = new javax.swing.JTextField();
        percentageSymbolLabel = new javax.swing.JLabel();
        moneySymbolLabel = new javax.swing.JLabel();
        moneySymbolLabel1 = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        searchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFieldKeyPressed(evt);
            }
        });

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/search.png"))); // NOI18N
        searchButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchButtonMouseClicked(evt);
            }
        });

        dtm = new DefaultTableModel(
            new Object[][][][][][]{},
            new String[]{
                "Descripción", "Forma", "Precio de Compra", "Porcentaje de Ganancia", "Precio de Venta", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, false
            };

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        productTable.setModel(dtm);
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                productTableMousePressed(evt);
            }
        });
        productTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productTableKeyReleased(evt);
            }
        });
        productTableScrollPane.setViewportView(productTable);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productTableScrollPane)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(productTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        descriptionLabel.setText("Descripción:");

        formLabel.setText("Forma:");

        unitPriceLabel.setText("Precio Unitario:");

        quantityLabel.setText("Cantidad:");

        batchLabel.setText("Lote:");

        supplierLabel.setText("Proveedor:");

        proofOfPaymentLabel.setText("Nº de Comprobante:");

        sanitaryRegisterLabel.setText("Registro Sanitario:");

        arrivalDateLabel.setText("Fecha de Llegada:");

        profitPercentageLabel.setText("Porcentaje de Ganancia:");

        salePriceLabel.setText("Precio de Venta:");

        expiryDateLabel.setText("Fecha de Vencimiento:");

        descriptionTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        dcbmForm = new DefaultComboBoxModel();
        formComboBox.setEditable(true);
        formComboBox.setModel(dcbmForm);
        formComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formComboBox.getEditor().getEditorComponent().addKeyListener(new java.awt.event.KeyAdapter() {

            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formComboBoxKeyReleased(evt);
            }
        });

        jtcForm = (JTextComponent) formComboBox.getEditor().getEditorComponent();

        unitPriceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unitPriceTextFieldKeyReleased(evt);
            }
        });

        dcbmSupplier = new DefaultComboBoxModel();
        supplierComboBox.setEditable(true);
        supplierComboBox.setModel(dcbmSupplier);
        supplierComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        supplierComboBox.getEditor().getEditorComponent().addKeyListener(new java.awt.event.KeyAdapter() {

            @Override
            public void keyReleased(java.awt.event.KeyEvent evt) {
                supplierComboBoxKeyReleased(evt);
            }
        });

        jtcSupplier = (JTextComponent) supplierComboBox.getEditor().getEditorComponent();

        arrivalDateChooser.setDate(new java.util.Date());
        arrivalDateChooser.getDateEditor().setEnabled(false);

        expiryDateChooser.setDate(new java.util.Date());
        expiryDateChooser.getDateEditor().setEnabled(false);

        profitPercentageTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                profitPercentageTextFieldKeyReleased(evt);
            }
        });

        salePriceTextField.setEditable(false);
        salePriceTextField.setEnabled(false);

        percentageSymbolLabel.setText("%");

        moneySymbolLabel.setText("S/.");

        moneySymbolLabel1.setText("S/.");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BOLETA", "FACTURA", "OTRO" }));

        acceptButton.setText("Aceptar");
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jLayeredPane1.setLayer(acceptButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(cancelButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout downPanelLayout = new javax.swing.GroupLayout(downPanel);
        downPanel.setLayout(downPanelLayout);
        downPanelLayout.setHorizontalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(proofOfPaymentLabel)
                        .addComponent(descriptionLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(formLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(unitPriceLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(quantityLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(batchLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(supplierLabel, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sanitaryRegisterLabel, javax.swing.GroupLayout.Alignment.LEADING))
                    .addComponent(arrivalDateLabel)
                    .addComponent(expiryDateLabel))
                .addGap(25, 25, 25)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(downPanelLayout.createSequentialGroup()
                        .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(batchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(arrivalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(downPanelLayout.createSequentialGroup()
                                .addComponent(proofOfPaymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sanitaryRegisterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(expiryDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downPanelLayout.createSequentialGroup()
                        .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(downPanelLayout.createSequentialGroup()
                                .addComponent(formComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(moneySymbolLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(unitPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)))
                        .addComponent(profitPercentageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(profitPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(percentageSymbolLabel)
                        .addGap(49, 49, 49)
                        .addComponent(salePriceLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moneySymbolLabel1)
                        .addGap(1, 1, 1)
                        .addComponent(salePriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, downPanelLayout.createSequentialGroup()
                .addGap(264, 264, 264)
                .addComponent(jLayeredPane1)
                .addGap(279, 279, 279))
        );
        downPanelLayout.setVerticalGroup(
            downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(downPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionLabel)
                    .addComponent(descriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formLabel)
                    .addComponent(formComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unitPriceLabel)
                    .addComponent(profitPercentageLabel)
                    .addComponent(salePriceLabel)
                    .addComponent(unitPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profitPercentageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salePriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percentageSymbolLabel)
                    .addComponent(moneySymbolLabel)
                    .addComponent(moneySymbolLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(quantityLabel)
                    .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(batchLabel)
                    .addComponent(batchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(supplierLabel)
                    .addComponent(supplierComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(proofOfPaymentLabel)
                    .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(proofOfPaymentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sanitaryRegisterLabel)
                    .addComponent(sanitaryRegisterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(arrivalDateLabel)
                    .addComponent(arrivalDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(downPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(expiryDateLabel)
                    .addComponent(expiryDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLayeredPane1)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(topDownSeparator)
            .addComponent(downPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topDownSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchButtonMouseClicked
        fillTable();
    }//GEN-LAST:event_searchButtonMouseClicked

    private void productTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMousePressed
        getProductSelected();
        validateAll();
    }//GEN-LAST:event_productTableMousePressed

    private void searchTextFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFieldKeyPressed
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            fillTable();
        }
    }//GEN-LAST:event_searchTextFieldKeyPressed

    private void productTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productTableKeyReleased
        getProductSelected();
        validateAll();
    }//GEN-LAST:event_productTableKeyReleased

    private void unitPriceTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unitPriceTextFieldKeyReleased
        if (validPrice() && validProfitPercentage()) {
            double price = MathUtils.round(Double.parseDouble(unitPriceTextField.getText()), 7);
            double profit = MathUtils.round(Double.parseDouble(profitPercentageTextField.getText()), 7);
            salePriceTextField.setText(MathUtils.round(price * (1 + profit / 100), 2) + "");
        }
    }//GEN-LAST:event_unitPriceTextFieldKeyReleased

    private void profitPercentageTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_profitPercentageTextFieldKeyReleased
        if (validPrice() && validProfitPercentage()) {
            double price = MathUtils.round(Double.parseDouble(unitPriceTextField.getText()), 7);
            double profit = MathUtils.round(Double.parseDouble(profitPercentageTextField.getText()), 7);
            salePriceTextField.setText(MathUtils.round(price * (1 + profit / 100), 2) + "");
        }
    }//GEN-LAST:event_profitPercentageTextFieldKeyReleased

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        boolean check = validateAll();
        if (check) {

            Form f = new Form(jtcForm.getText());
            check &= FormDAO.getForm(f);
            Supplier s = new Supplier(jtcSupplier.getText());
            check &= SupplierDAO.getSupplier(s);
            Product p = new Product();
            p.setDescription(descriptionTextField.getText().trim());
            p.setForm(f);
            double price = MathUtils.round(Double.parseDouble(unitPriceTextField.getText()), 7);
            double profit = MathUtils.round(Double.parseDouble(profitPercentageTextField.getText()), 7);
            p.setProductUnitPrice(price);
            p.setProductProfitPercentage(profit);
            p.setSalePrice(MathUtils.round(price * (1 + profit / 100), 2));
            p.setStock(Integer.parseInt(quantityTextField.getText().trim()));
            check &= ProductDAO.getProduct(p);
            Entry e = new Entry();
            e.setProduct(p);
            e.setSupplier(s);
            e.setEntryUnitPrice(price);
            e.setEntryProfitPercentage(profit);
            e.setQuantity(Integer.parseInt(quantityTextField.getText().trim()));
            e.setBatch(batchTextField.getText());
            ProofOfPayment pop = new ProofOfPayment(proofOfPaymentTextField.getText().trim(), typeComboBox.getSelectedItem() + "");
            check &= ProofOfPaymentDAO.insertProofOfPayment(pop);
            e.setProofOfPayment(pop);
            e.setSanitaryRegister(sanitaryRegisterTextField.getText());
            Date arrival = new Date(arrivalDateChooser.getDate().getTime());
            e.setArrivalDate(arrival);
            Date expiry = new Date(expiryDateChooser.getDate().getTime());
            e.setExpiryDate(expiry);
            check &= EntryDAO.insertEntry(e);
        }
        String message = "Entrada de producto ingresada correctamente.";

        if (check) {
            cleanFields();
            validateAll();
            fillTable();
        } else {
            message = "Algunos datos están incompletos o hubo un error ingresar entrada.";
        }
        JOptionPane.showInternalMessageDialog(this, message);
        fillFormComboBox();
        fillSupplierComboBox();
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        if (evt.getClickCount() == 2) {
            int selectedIndex = productTable.getSelectedRow();
            if (selectedIndex == -1) {
                return;
            }
            Product p = (Product) dtm.getValueAt(selectedIndex, 0);
            EntryListDialog dialog = new EntryListDialog(null, true, p);
            dialog.setVisible(true);
            fillTable();
            /*String ans = JOptionPane.showInternalInputDialog(topPanel, "Ingrese el nuevo stock: ");
            if (ans != null) {
                int stock = Integer.parseInt(ans);
                Product p = (Product) dtm.getValueAt(selectedIndex, 0);
                EntryListDialog dialog = new EntryListDialog(null, true, p);
                dialog.setVisible(true);
                p.setStock(stock);
                boolean check = ProductDAO.updateProduct(p);
                if (check) {
                    JOptionPane.showInternalMessageDialog(topPanel, "Stock actualizado correctamente.");
                    fillTable();
                } else {
                    JOptionPane.showInternalMessageDialog(topPanel, "No se pudo actualizar el stock.");
                }
            */
        }
    }//GEN-LAST:event_productTableMouseClicked

    private void formComboBoxKeyReleased(java.awt.event.KeyEvent evt) {

    }

    private void supplierComboBoxKeyReleased(java.awt.event.KeyEvent evt) {

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private com.toedter.calendar.JDateChooser arrivalDateChooser;
    private javax.swing.JLabel arrivalDateLabel;
    private javax.swing.JLabel batchLabel;
    private javax.swing.JTextField batchTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JPanel downPanel;
    private com.toedter.calendar.JDateChooser expiryDateChooser;
    private javax.swing.JLabel expiryDateLabel;
    private javax.swing.JComboBox formComboBox;
    private javax.swing.JLabel formLabel;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLabel moneySymbolLabel;
    private javax.swing.JLabel moneySymbolLabel1;
    private javax.swing.JLabel percentageSymbolLabel;
    private javax.swing.JTable productTable;
    private javax.swing.JScrollPane productTableScrollPane;
    private javax.swing.JLabel profitPercentageLabel;
    private javax.swing.JTextField profitPercentageTextField;
    private javax.swing.JLabel proofOfPaymentLabel;
    private javax.swing.JTextField proofOfPaymentTextField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JLabel salePriceLabel;
    private javax.swing.JTextField salePriceTextField;
    private javax.swing.JLabel sanitaryRegisterLabel;
    private javax.swing.JTextField sanitaryRegisterTextField;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JComboBox supplierComboBox;
    private javax.swing.JLabel supplierLabel;
    private javax.swing.JSeparator topDownSeparator;
    private javax.swing.JPanel topPanel;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel unitPriceLabel;
    private javax.swing.JTextField unitPriceTextField;
    // End of variables declaration//GEN-END:variables

    private void fillTable() {
        List<Product> list = ProductDAO.listOfProductsByDescription(searchTextField.getText().trim());
        if (list != null) {
            while (dtm.getRowCount() > 0) {
                dtm.removeRow(0);
            }

            for (Product p : list) {
                dtm.addRow(new Object[]{p, p.getForm(), p.getProductUnitPrice(), p.getProductProfitPercentage(), p.getSalePrice(), p.getStock()});
            }
        }
    }

    private void getProductSelected() {
        int selectedIndex = productTable.getSelectedRow();
        if (selectedIndex == -1) {
            return;
        }
        productSelected = (Product) dtm.getValueAt(selectedIndex, 0);
        descriptionTextField.setText(productSelected.getDescription());
        formComboBox.setSelectedItem(productSelected.getForm().getDetail());
        unitPriceTextField.setText(productSelected.getProductUnitPrice() + "");
        profitPercentageTextField.setText(productSelected.getProductProfitPercentage() + "");
        salePriceTextField.setText(productSelected.getSalePrice() + "");
        quantityTextField.setText(productSelected.getStock() + "");

    }

    private boolean validateAll() {
        boolean check = validBatch();
        check &= validDescription();
        check &= validForm();
        check &= validPrice();
        check &= validProfitPercentage();
        check &= validProofOfPayment();
        check &= validProofOfPayment();
        check &= validQuantity();
        check &= validSanitaryRegister();
        check &= validSupplier();
        return check;
    }

    private void fillFormComboBox2() {
        List<Form> list = FormDAO.listOfFormsByDetail(jtcForm.getText());
        if (list != null) {
            dcbmForm.removeAllElements();
            dcbmForm.addElement(jtcForm.getText());
            for (Form f : list) {
                dcbmForm.addElement(f);
            }
            //if (!jtcForm.getText().isEmpty()) {
            //formComboBox.setEditable(true);

            formComboBox.setPopupVisible(true);
            //}
        }
    }

    private void fillSupplierComboBox2() {
        List<Supplier> list = SupplierDAO.listOfSuppliersBySupplierName(jtcSupplier.getText());
        if (list != null) {
            dcbmSupplier.removeAllElements();
            for (Supplier s : list) {
                dcbmSupplier.addElement(s);
            }
            if (!jtcSupplier.getText().isEmpty()) {
                supplierComboBox.setEditable(true);
                supplierComboBox.setPopupVisible(true);
            }
        }
    }

    private boolean validDescription() {
        String s = descriptionTextField.getText();
        if (s.isEmpty()) {
            return false;
        }
        if (s.length() > 50) {
            return false;
        }
        return true;
    }

    private boolean validForm() {
        String s = jtcForm.getText();
        if (s.isEmpty()) {
            return false;
        }
        if (s.length() > 30) {
            return false;
        }
        return true;
    }

    private boolean validSupplier() {
        String s = jtcSupplier.getText();
        if (s.isEmpty()) {
            return false;
        }
        if (s.length() > 75) {
            return false;
        }
        return true;
    }

    private boolean validQuantity() {
        String s = quantityTextField.getText();
        return !s.isEmpty();
    }

    private boolean validBatch() {
        String s = batchTextField.getText();

        if (s.length() > 35) {
            return false;
        }
        return true;
    }

    private boolean validProofOfPayment() {
        String s = proofOfPaymentTextField.getText();
        if (s.isEmpty()) {
            return false;
        }
        if (s.length() > 50) {
            return false;
        }
        return true;
    }

    private boolean validSanitaryRegister() {
        String s = sanitaryRegisterTextField.getText();
        if (s.length() > 50) {
            return false;
        }
        return true;
    }

    private boolean validPrice() {
        String s = unitPriceTextField.getText();
        if (s.isEmpty()) {
            return false;
        }
        int index = s.indexOf('.');
        for (int i = 0; i < index; ++i) {
            if (!Character.isDigit(s.charAt(i))) {
                return false;
            }
        }
        for (int i = index + 1; i < s.length(); ++i) {
            if (!Character.isDigit(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    private boolean validProfitPercentage() {
        String s = profitPercentageTextField.getText();
        if (s.isEmpty()) {
            return false;
        }
        int index = s.indexOf('.');
        for (int i = 0; i < index; ++i) {
            if (!Character.isDigit(s.charAt(i))) {
                return false;
            }
        }
        for (int i = index + 1; i < s.length(); ++i) {
            if (!Character.isDigit(s.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    private void cleanFields() {
        descriptionTextField.setText("");
        jtcForm.setText("");
        unitPriceTextField.setText("");
        profitPercentageTextField.setText("");
        salePriceTextField.setText("");
        quantityTextField.setText("");
        //batchTextField.setText("");
        //jtcSupplier.setText("");
        //proofOfPaymentTextField.setText("");
        //typeComboBox.setSelectedIndex(0);
        //sanitaryRegisterTextField.setText("");
    }

    private void fillFormComboBox() {
        List<Form> list = FormDAO.listOfFormsByDetail("");
        formComboBox.removeAllItems();
        for (Form f : list) {
            formComboBox.addItem(f);
        }
    }

    private void fillSupplierComboBox() {
        List<Supplier> list = SupplierDAO.listOfSuppliersBySupplierName("");
        supplierComboBox.removeAllItems();
        for (Supplier s : list) {
            supplierComboBox.addItem(s);
        }
    }

}
